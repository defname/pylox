class Heap {
    init(val, compFnc) {
        this.value = val;
        this.left = nil;
        this.right = nil;

        this.compFnc = compFnc;
    }

    insert(val) {
        var cmp = this.compFnc(val, this.value);
        if (cmp == 0) {
            this.value = val;
            return;
        }
        if (cmp < 0) {
            if (this.left != nil)
                this.left.insert(val);
            else
                this.left = Heap(val, this.compFnc);
        }
        else {
            if (this.right != nil)
                this.right.insert(val);
            else
                this.right = Heap(val, this.compFnc);
        }
    }

    get(val) {
        print("get");
        var cmp = this.compFnc(val, this.value);
        if (cmp == 0) return this.value;
        if (cmp < 0) return this.left == nil ? nil : this.left.get(val);
        return this.right == nil ? nil : this.right.get(val);
    }
}


class DictPair {
    init(key, val) {
        this.key = key;
        this.value = val;
    }

    class compareKeys(a, b) {
        if (!isinstance(a, DictPair) or !isinstance(b, DictPair))
            return nil;
        if (a.key == b.key) return 0;
        if (strcmp(a.key, b.key)) return -1;
        return 1;
    }
}


class Dict {
    init() {
        this.root = nil;
        this.length = 0;
    }

    set(key, value) {
        if (this.root == nil) {
            this.root = Heap(
                DictPair(key, value),
                DictPair.compareKeys
            );
        }
        else {
            this.root.insert(DictPair(key, value));
        }
    }

    get(key) {
        if (this.root == nil) return nil;
        var item = this.root.get(DictPair(key, nil));
        if (item == nil) return nil;
        return item.value;
    }
}
